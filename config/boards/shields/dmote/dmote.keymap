#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT	0
#define NUMBER	1

/ {
	combos {
		compatible = "zmk,combos";
		combo_q {
			timeout-ms = <50>;
			key-positions = <30 43>;
			bindings = <&kp Q>;
		};
		combo_z {
			timeout-ms = <50>;
			key-positions = <2 3>;
			bindings = <&kp Z>;
		};
	};
	behaviors {
		minplus: minus_plus {
			compatible = "zmk,behavior-mod-morph";
			label = "MINUS_PLUS";
			#binding-cells = <0>;
			bindings = <&kp KP_MINUS>, <&kp KP_PLUS>;
			mods = <(MOD_LSFT)>;
		};
		dimu: divide_multiply {
			compatible = "zmk,behavior-mod-morph";
			label = "DIVIDE_MULTIPLY";
			#binding-cells = <0>;
			bindings = <&kp KP_DIVIDE>, <&kp KP_MULTIPLY>;
			mods = <(MOD_LSFT)>;
		};
		spta: space_tab {
			compatible = "zmk,behavior-mod-morph";
			label = "SPACE_TAB";
			#binding-cells = <0>;
			bindings = <&kp SPACE>, <&kp TAB>;
			mods = <(MOD_LSFT|MOD_LALT)>;
		};
		dotan: dot_ampersand {
			compatible = "zmk,behavior-mod-morph";
			label = "DOT_AMPERSAND";
			#binding-cells = <0>;
			bindings = <&kp DOT>, <&kp AMPERSAND>;
			mods = <(MOD_LSFT)>;
		};
		compipe: comma_pipe {
			compatible = "zmk,behavior-mod-morph";
			label = "COMMA_PIPE";
			#binding-cells = <0>;
			bindings = <&kp COMMA>, <&kp PIPE>;
			mods = <(MOD_LSFT)>;
		};
		dqq: doublequote_question {
			compatible = "zmk,behavior-mod-morph";
			label = "DOUBLEQUOTE_QUESTION";
			#binding-cells = <0>;
			bindings = <&kp DOUBLE_QUOTES>, <&kp QUESTION>;
			mods = <(MOD_LSFT)>;
		};
		sqex: singlequote_exclamation {
			compatible = "zmk,behavior-mod-morph";
			label = "SINGLEQUOTE_EXCLAMATION";
			#binding-cells = <0>;
			bindings = <&kp SINGLE_QUOTE>, <&kp EXCLAMATION>;
			mods = <(MOD_LSFT)>;
		};
		sa: sticky_shift {
			compatible = "zmk,behavior-hold-tap";
			label = "STICKY_SHIFT";
			#binding-cells = <2>;
			tapping-term-ms = <130>;
			quick_tap_ms = <0>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&sk>;
		};
		sb: sticky_shiftt {
			compatible = "zmk,behavior-hold-tap";
			label = "STICKY_SHIFTT";
			#binding-cells = <2>;
			tapping-term-ms = <130>;
			quick_tap_ms = <0>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&sl>;
		};
		equn: equal_underscore {
			compatible = "zmk,behavior-mod-morph";
			label = "EQUAL_UNDERSCORE";
			#binding-cells = <0>;
			bindings = <&kp EQUAL>, <&kp UNDERSCORE>;
			mods = <(MOD_LSFT)>;
		};
		brlt: left_bracket_less_than {
			compatible = "zmk,behavior-mod-morph";
			label = "LEFT_BRACKET_LESS_THAN";
			#binding-cells = <0>;
			bindings = <&kp LEFT_PARENTHESIS>, <&kp LT>;
			mods = <(MOD_LSFT)>;
		};
		brgt: right_bracket_greater_than {
			compatible = "zmk,behavior-mod-morph";
			label = "RIGHT_BRACKET_GREATER_THAN";
			#binding-cells = <0>;
			bindings = <&kp RIGHT_PARENTHESIS>, <&kp GT>;
			mods = <(MOD_LSFT)>;
		};
	};
	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
				&kp C_MUTE	&kp C_VOLUME_UP	&kp F	&kp M	&kp P	&kp V			&kp SEMI	&dotan	&dimu	&dqq	&kp CAPSLOCK	&kp K_CONTEXT_MENU
				&kp C_VOLUME_DOWN	&kp J	&kp S	&kp N	&kp D	&kp W			&compipe	&kp A	&kp E	&kp I	&sqex			&kp RSHFT
				&kp C_PLAY_PAUSE	&kp R	&kp G	&kp L	&kp C	&kp B			&minplus	&kp U	&kp O	&kp Y	&kp H			&kp RALT
				&kp C_NEXT	&kp X	&kp LEFT	&kp UP	&kp RIGHT								&none	&none	&none	&kp K			&kp RCTRL
												&kp DOWN												&none
									&kp BSPC	&sb NUMBER NUMBER									&equn	&kp LMETA
								&kp T		&none		&sa LSHFT LSHFT						&kp RET		&spta	&kp LALT
										&kp PSCRN	&kp ESC											&kp DEL	&kp LCTRL
			>;
		};

		number_layer {
			bindings = <
				&trans	&trans		&trans		&brlt		&brgt		&trans			&trans	&trans	&trans	&trans	&trans	&trans
				&trans	&trans		&kp N5		&kp N0		&kp N3		&kp N7			&trans	&kp N4	&kp N2	&kp N6	&trans	&trans
				&trans	&kp N9		&kp GRAVE	&kp LBKT	&kp RBKT	&trans			&trans	&trans	&trans	&trans	&kp N8	&trans
				&trans	&kp BSLH	&kp HOME	&kp PAGE_UP	&kp END								&trans	&trans	&trans	&trans	&trans
												&kp PAGE_DOWN											&trans
												&trans	&trans										&trans	&trans
											&trans	&trans	&trans								&trans	&kp N1	&trans
												&trans	&trans										&trans	&trans
			>;
		};
	};
};